Dump of assembler code for function main:
   0x080486c8 <+0>:     push   %ebp                               # [start]
   0x080486c9 <+1>:     mov    %esp,%ebp                          # [start]
   0x080486cb <+3>:     push   %edi                               # [start]
   0x080486cc <+4>:     push   %ebx                               # [start]
   0x080486cd <+5>:     and    $0xfffffff0,%esp                   # [start]
   0x080486d0 <+8>:     sub    $0xb0,%esp                         # [start]
   0x080486d6 <+14>:    call   0x8048550 <fork@plt>
   0x080486db <+19>:    mov    %eax,0xac(%esp)                    # pid_t child = fork();
   0x080486e2 <+26>:    lea    0x20(%esp),%ebx
   0x080486e6 <+30>:    mov    $0x0,%eax
   0x080486eb <+35>:    mov    $0x20,%edx
   0x080486f0 <+40>:    mov    %ebx,%edi
   0x080486f2 <+42>:    mov    %edx,%ecx
   0x080486f4 <+44>:    rep stos %eax,%es:(%edi)                  # char buffer[128] = {0};
   0x080486f6 <+46>:    movl   $0x0,0xa8(%esp)                    # int syscall = 0;
   0x08048701 <+57>:    movl   $0x0,0x1c(%esp)                    # int status = 0;
   0x08048709 <+65>:    cmpl   $0x0,0xac(%esp)
   0x08048711 <+73>:    jne    0x8048769 <main+161>               # if (!child)
   0x08048713 <+75>:    movl   $0x1,0x4(%esp)
   0x0804871b <+83>:    movl   $0x1,(%esp)
   0x08048722 <+90>:    call   0x8048540 <prctl@plt>              # prctl(PR_SET_PDEATHSIG, SIGHUP);
   0x08048727 <+95>:    movl   $0x0,0xc(%esp)
   0x0804872f <+103>:   movl   $0x0,0x8(%esp)
   0x08048737 <+111>:   movl   $0x0,0x4(%esp)
   0x0804873f <+119>:   movl   $0x0,(%esp)
   0x08048746 <+126>:   call   0x8048570 <ptrace@plt>             # ptrace(PTRACE_TRACEME, 0, NULL, NULL);
   0x0804874b <+131>:   movl   $0x8048903,(%esp)
   0x08048752 <+138>:   call   0x8048500 <puts@plt>               # puts("Give me some shellcode, k");
   0x08048757 <+143>:   lea    0x20(%esp),%eax
   0x0804875b <+147>:   mov    %eax,(%esp)
   0x0804875e <+150>:   call   0x80484b0 <gets@plt>               # gets(buffer);
   0x08048763 <+155>:   jmp    0x804881a <main+338>
   0x08048768 <+160>:   nop                                       # [loop end]
   0x08048769 <+161>:   lea    0x1c(%esp),%eax
   0x0804876d <+165>:   mov    %eax,(%esp)
   0x08048770 <+168>:   call   0x80484f0 <wait@plt>               # wait(&status);
   0x08048775 <+173>:   mov    0x1c(%esp),%eax
   0x08048779 <+177>:   mov    %eax,0xa0(%esp)
   0x08048780 <+184>:   mov    0xa0(%esp),%eax
   0x08048787 <+191>:   and    $0x7f,%eax
   0x0804878a <+194>:   test   %eax,%eax
   0x0804878c <+196>:   je     0x80487ac <main+228>
   0x0804878e <+198>:   mov    0x1c(%esp),%eax
   0x08048792 <+202>:   mov    %eax,0xa4(%esp)
   0x08048799 <+209>:   mov    0xa4(%esp),%eax
   0x080487a0 <+216>:   and    $0x7f,%eax
   0x080487a3 <+219>:   add    $0x1,%eax
   0x080487a6 <+222>:   sar    %al
   0x080487a8 <+224>:   test   %al,%al
   0x080487aa <+226>:   jle    0x80487ba <main+242>               # if (WIFEXITED(status) || WIFSIGNALED(status))
   0x080487ac <+228>:   movl   $0x804891d,(%esp)
   0x080487b3 <+235>:   call   0x8048500 <puts@plt>               # puts("child is exiting...");
   0x080487b8 <+240>:   jmp    0x804881a <main+338>               # break;
   0x080487ba <+242>:   movl   $0x0,0xc(%esp)
   0x080487c2 <+250>:   movl   $0x2c,0x8(%esp)
   0x080487ca <+258>:   mov    0xac(%esp),%eax
   0x080487d1 <+265>:   mov    %eax,0x4(%esp)
   0x080487d5 <+269>:   movl   $0x3,(%esp)
   0x080487dc <+276>:   call   0x8048570 <ptrace@plt>
   0x080487e1 <+281>:   mov    %eax,0xa8(%esp)                    # syscall = ptrace(PTRACE_PEEKUSER, child, 4 * ORIG_EAX, NULL);
   0x080487e8 <+288>:   cmpl   $0xb,0xa8(%esp)
   0x080487f0 <+296>:   jne    0x8048768 <main+160>               # if (syscall == 11)
   0x080487f6 <+302>:   movl   $0x8048931,(%esp)
   0x080487fd <+309>:   call   0x8048500 <puts@plt>               # printf("no exec() for you\n");
   0x08048802 <+314>:   movl   $0x9,0x4(%esp)
   0x0804880a <+322>:   mov    0xac(%esp),%eax
   0x08048811 <+329>:   mov    %eax,(%esp)
   0x08048814 <+332>:   call   0x8048520 <kill@plt>               # kill(child, SIGKILL);
   0x08048819 <+337>:   nop                                       # break;
   0x0804881a <+338>:   mov    $0x0,%eax                          # return EXIT_SUCCESS;
   0x0804881f <+343>:   lea    -0x8(%ebp),%esp                    # [end]
   0x08048822 <+346>:   pop    %ebx                               # [end]
   0x08048823 <+347>:   pop    %edi                               # [end]
   0x08048824 <+348>:   pop    %ebp                               # [end]
   0x08048825 <+349>:   ret                                       # [end]

Dump of assembler code for function enable_timeout_cons:
   0x080486a0 <+0>:     push   %ebp                               # [start]
   0x080486a1 <+1>:     mov    %esp,%ebp                          # [start]
   0x080486a3 <+3>:     sub    $0x18,%esp                         # [start]
   0x080486a6 <+6>:     movl   $0x804868f,0x4(%esp)
   0x080486ae <+14>:    movl   $0xe,(%esp)
   0x080486b5 <+21>:    call   0x80484d0 <signal@plt>             # signal(SIGALRM, prog_timeout);
   0x080486ba <+26>:    movl   $0x3c,(%esp)
   0x080486c1 <+33>:    call   0x80484e0 <alarm@plt>              # alarm(_time);
   0x080486c6 <+38>:    leave                                     # [end]
   0x080486c7 <+39>:    ret                                       # [end]

Dump of assembler code for function prog_timeout:
   0x0804868f <+0>:     push   %ebp                               # [start]
   0x08048690 <+1>:     mov    %esp,%ebp                          # [start]
   0x08048692 <+3>:     mov    $0x1,%eax
   0x08048697 <+8>:     mov    $0x1,%ebx
   0x0804869c <+13>:    int    $0x80
   0x0804869e <+15>:    pop    %ebp                               # [end]
   0x0804869f <+16>:    ret                                       # [end]
