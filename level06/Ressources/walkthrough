
Alex:

1. See info functions:
	0x08048748  auth
2. Disas auth and convert to c:
	- auth hash username in loop 
	- compare it with next input
3. Set breakpoint at ptrace and after hash loop:
	(gdb) b *0x080487b5
	Breakpoint 1 at 0x80487b5
	(gdb) b *0x08048866
	Breakpoint 2 at 0x8048866 
4. Run it
(gdb) r
Starting program: /home/users/level06/level06
***********************************
*               level06           *
***********************************
-> Enter Login: testing
***********************************
***** NEW ACCOUNT DETECTED ********
***********************************
-> Enter Serial: 142
5. Jump to hash and see it
(gdb) jump *0x080487ed
Continuing at 0x80487ed.

Breakpoint 2, 0x08048866 in auth () than to find value of hash login which we had
enter in Login.
Register ebp - 0x10 help us to find our hash value than to pass it in serial
(gdb) p *(int*)($ebp-0x10)
$1 = 6231043
6. Use it:
level06@OverRide:~$ ./level06
***********************************
*               level06           *
***********************************
-> Enter Login: testing
***********************************
***** NEW ACCOUNT DETECTED ********
***********************************
-> Enter Serial: 6231043
Authenticated!
$ cat /home/users/level07/.pass
GbcPDRgsFK77LNnnuh7QyFYA2942Gp8yKj9KrWD8

Bekhruz:

После раскодировки примерного кода мы обнаруживаем, что код получает аргументы username & serial,
затем отправляет в функцию auth.
В функции auth устанавливается конец строки в строке username через
функцию strcspn.
Узнаётся длина. И если длина меньше 6, то выходит.
Далее функция ptrace:
ptrace - это средство, позволяющее родительскому процессу 
наблюдать и контролировать протекание другого процесса, 
просматривать и изменять его данные и регистры. 
Обычно эта функция используется для создания точек прерывания 
в программе отладки и отслеживания системных вызовов.

ptrace(enum __ptrace_request request, pid_t pid, 
            void *addr, void *data);

if (ptrace(PTRACE_TRACEME, 0, 1, 0) == -1)

request - PTRACE_TRACEME - это действие, которое необх-мо сделать
pid  - 0 - индентификатор трассируемого процесса
addr - 1 - addr и data зависят от request
data - 1

Т.е. это проверка на вмешательство в настоящий процесс.
Если через другие программы либо сами мы пытаемся получить
доступ к процессу, то прогрмма для проверки вмешательства 
сама пытается получить доступ к настоящему процессу. 
Если ptrace возвращает -1, значит
выполняется чужое вмешательство, поэтому блокируется.

Далее идёт операция XOR с username, по которой меняется бит 4-го значения
+ складывается со значением 0x5EEDED, которое в 
десятичной системе 6221293

Далее в цикле проходится по циклу. Если это символы
от 32 до 127 (сюда входят цифры, буквы и спец символы),
то возврат.
Иначе снова XOR и деление с остатком.
Далее serial должны совпасть с chk, которая видоизменена
с XOR. Если не совпадают, то возврат ошибки.

Взлом:
Делаем breakpoint на ptrace (чтобы не засёк отслеживание нашего процесса на gdb)
 и на сравнении значений if (serial != chk)
	(gdb) b *0x080487b5
	Breakpoint 1 at 0x80487b5
	(gdb) b *0x08048866
	Breakpoint 2 at 0x8048866 
для точек остановки и получения значения serial.

Далее запуск:
r

Подаём, например, логин - testing и серийный номер 142
Получаем значение ebp (хранит кадры стэка, включая функц, - 0x10, т.к. там находится наш eax,
регистр, который хранит chk)
Сначала перепрыгиваем по адресу сравнения:
   0x08048866 <+286>:   cmp    -0x10(%ebp),%eax -- вот здесь serial != chk
(gdb) jump *0x080487ed
Continuing at 0x80487ed.

А дальше узнаём chk для сравнения.
(gdb) p *(int*)($ebp-0x10)
6231043
Затем вводим заново логин:
testing - потому что под этот логин testing
хешированное через XOR значение будет 6231043.
Соответственно, подаём его как serial.

-> Enter Login: testing
***********************************
***** NEW ACCOUNT DETECTED ********
***********************************
-> Enter Serial: 6231043
Authenticated!
$ whoami 
level07
$ cat /home/users/level07/.pass
GbcPDRgsFK77LNnnuh7QyFYA2942Gp8yKj9KrWD8